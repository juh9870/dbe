use crate::graph::node::functional::{functional_node, C};
use crate::graph::node::NodeFactory;
use crate::value::ENumber;
use std::sync::Arc;

pub(super) fn nodes() -> Vec<Arc<dyn NodeFactory>> {
    vec![
        functional_node(
            |_: C, a: ENumber, b: ENumber| a + b,
            "add",
            &["a", "b"],
            &["sum"],
            &["math"],
        ),
        functional_node(
            |_: C, a: ENumber, b: ENumber| a - b,
            "subtract",
            &["a", "b"],
            &["difference"],
            &["math"],
        ),
        functional_node(
            |_: C, a: ENumber, b: ENumber| a * b,
            "multiply",
            &["a", "b"],
            &["product"],
            &["math"],
        ),
        functional_node(
            |_: C, a: ENumber, b: ENumber| a / b,
            "divide",
            &["a", "b"],
            &["quotient"],
            &["math"],
        ),
        functional_node(
            |_: C, a: ENumber, b: ENumber| ENumber::from(a.powf(b.0)),
            "power",
            &["a", "b"],
            &["result"],
            &["math"],
        ),
        functional_node(|_: C, a: ENumber| -a, "negate", &["a"], &["-a"], &["math"]),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.sqrt()),
            "square_root",
            &["a"],
            &["√a"],
            &["math"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.abs()),
            "absolute",
            &["a"],
            &["|a|"],
            &["math"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.floor()),
            "floor",
            &["a"],
            &["⌊a⌋"],
            &["math.rounding"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.ceil()),
            "ceiling",
            &["a"],
            &["⌈a⌉"],
            &["math.rounding"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.round()),
            "round",
            &["a"],
            &["⌊a⌋"],
            &["math.rounding"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.trunc()),
            "truncate",
            &["a"],
            &["result"],
            &["math.rounding"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.fract()),
            "fractional",
            &["a"],
            &["{a}"],
            &["math.rounding"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.ln()),
            "natural_logarithm",
            &["a"],
            &["ln(a)"],
            &["math.transcendental"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.log10()),
            "logarithm_base_10",
            &["a"],
            &["log10(a)"],
            &["math.transcendental"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.sin()),
            "exponential",
            &["a"],
            &["e^a"],
            &["math.transcendental"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.sin()),
            "sine",
            &["a"],
            &["sin(a)"],
            &["math.trigonometry"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.cos()),
            "cosine",
            &["a"],
            &["cos(a)"],
            &["math.trigonometry"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.tan()),
            "tangent",
            &["a"],
            &["tan(a)"],
            &["math.trigonometry"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.asin()),
            "arc_sine",
            &["a"],
            &["asin(a)"],
            &["math.trigonometry"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.acos()),
            "arc_cosine",
            &["a"],
            &["acos(a)"],
            &["math.trigonometry"],
        ),
        functional_node(
            |_: C, a: ENumber| ENumber::from(a.atan()),
            "arc_tangent",
            &["a"],
            &["atan(a)"],
            &["math.trigonometry"],
        ),
        functional_node(
            |_: C| ENumber::from(std::f64::consts::PI),
            "pi",
            &[],
            &["pi"],
            &["math.trigonometry", "math.constants"],
        ),
        functional_node(
            |_: C| ENumber::from(std::f64::consts::E),
            "e",
            &[],
            &["e"],
            &["math.transcendental", "math.constants"],
        ),
        functional_node(
            |_: C| ENumber::from(std::f64::consts::TAU),
            "tau",
            &[],
            &["tau"],
            &["math.trigonometry", "math.constants"],
        ),
        functional_node(
            |_: C| ENumber::from(1.618_033_988_749_895_f64),
            "golden_ratio",
            &[],
            &["phi"],
            &["math.constants"],
        ),
        functional_node(
            |_: C| ENumber::from(std::f64::consts::SQRT_2),
            "sqrt_2",
            &[],
            &["√2"],
            &["math.constants"],
        ),
        functional_node(
            |_: C, a: ENumber, b: ENumber| a > b,
            "greater_than",
            &["a", "b"],
            &["a > b"],
            &["math.comparison"],
        ),
        functional_node(
            |_: C, a: ENumber, b: ENumber| a >= b,
            "greater_or_equal_than",
            &["a", "b"],
            &["a >= b"],
            &["math.comparison"],
        ),
        functional_node(
            |_: C, a: ENumber, b: ENumber| a < b,
            "lesser_than",
            &["a", "b"],
            &["a < b"],
            &["math.comparison"],
        ),
        functional_node(
            |_: C, a: ENumber, b: ENumber| a <= b,
            "lesser_or_equal_than",
            &["a", "b"],
            &["a <= b"],
            &["math.comparison"],
        ),
        functional_node(
            |_: C, a: ENumber, b: ENumber| a == b,
            "num_equals",
            &["a", "b"],
            &["a == b"],
            &["math.comparison"],
        ),
    ]
}
